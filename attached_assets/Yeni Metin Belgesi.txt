https://panelhesaplama.my.canva.site/




<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kompozit Panel Yükleme Planlama Sistemi</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f4f8;
        }
        .panel-item {
            animation: fadeIn 0.3s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .loading-plan-container {
            position: relative;
            border: 2px solid #3b82f6;
            margin-top: 20px;
            overflow: hidden;
            background-color: #f8fafc;
        }
        .pallet {
            position: absolute;
            border: 1px solid #1e40af;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            color: #1e3a8a;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .vehicle-outline {
            position: absolute;
            border: 2px dashed #64748b;
            background-color: rgba(226, 232, 240, 0.3);
        }
        .vehicle-floor {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 5px;
            background-color: #475569;
        }
    </style>
</head>
<body>
    <div class="min-h-screen flex flex-col">
        <header class="bg-blue-600 text-white p-4 shadow-md">
            <div class="container mx-auto">
                <h1 class="text-2xl font-bold">Kompozit Panel Yükleme Planlama Sistemi</h1>
            </div>
        </header>

        <main class="flex-grow container mx-auto p-4 md:p-6">
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 class="text-xl font-bold mb-4 text-gray-800">Konteyner/TIR Bilgileri</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label for="vehicleType" class="block text-gray-700 mb-1">Araç Tipi</label>
                        <select id="vehicleType" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="custom">Özel Ölçüler</option>
                            <option value="20ft_container">20" konteyner (5.90m x 2.35m x 2.39m)</option>
                            <option value="40ft_container">40" konteyner (12.03m x 2.35m x 2.39m)</option>
                            <option value="40ft_hc_container">40" high cube konteyner (12.03m x 2.35m x 2.69m)</option>
                            <option value="standard_truck">TIR (13.60m x 2.45m x 2.70m)</option>
                        </select>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4" id="customDimensionsContainer">
                    <div>
                        <label for="containerLength" class="block text-gray-700 mb-1">Uzunluk (cm)</label>
                        <input type="number" id="containerLength" min="1" value="1360" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="containerWidth" class="block text-gray-700 mb-1">Genişlik (cm)</label>
                        <input type="number" id="containerWidth" min="1" value="245" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div>
                        <label for="containerHeight" class="block text-gray-700 mb-1">Yükseklik (cm)</label>
                        <input type="number" id="containerHeight" min="1" value="270" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4" id="vehicleInfoContainer">
                    <div>
                        <label class="block text-gray-700 mb-1">Hacim (m³)</label>
                        <div id="vehicleVolume" class="p-2 bg-gray-100 rounded">90</div>
                    </div>
                    <div>
                        <label class="block text-gray-700 mb-1">Maksimum Yük (kg)</label>
                        <div id="vehicleMaxPayload" class="p-2 bg-gray-100 rounded">26000</div>
                    </div>
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 mb-6">
                <h2 class="text-xl font-bold mb-4 text-gray-800">Panel Bilgileri</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Panel Ekleme Formu -->
                    <div>
                        <div class="space-y-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="panelColor" class="block text-gray-700 mb-1">Renk</label>
                                    <input type="text" id="panelColor" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Renk giriniz">
                                </div>
                                <div>
                                    <label for="panelCore" class="block text-gray-700 mb-1">Core Tipi</label>
                                    <select id="panelCore" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="PE">PE</option>
                                        <option value="FR">FR</option>
                                        <option value="A2">A2</option>
                                    </select>
                                </div>
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="panelWidth" class="block text-gray-700 mb-1">En (mm)</label>
                                    <select id="panelWidth" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="1000">1000 mm</option>
                                        <option value="1250">1250 mm</option>
                                        <option value="1500">1500 mm</option>
                                        <option value="1600">1600 mm</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="panelLength" class="block text-gray-700 mb-1">Boy (mm)</label>
                                    <input type="number" id="panelLength" min="1" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Boy giriniz">
                                </div>
                            </div>
                            <div class="grid grid-cols-3 gap-4">
                                <div>
                                    <label for="panelThickness" class="block text-gray-700 mb-1">Kalınlık (mm)</label>
                                    <input type="number" id="panelThickness" min="1" value="4" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label for="panelCount" class="block text-gray-700 mb-1">Adet</label>
                                    <input type="number" id="panelCount" min="1" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Adet giriniz">
                                </div>
                                <div>
                                    <label for="panelArea" class="block text-gray-700 mb-1">m² (Opsiyonel)</label>
                                    <input type="number" id="panelArea" min="0" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="m² giriniz">
                                </div>
                            </div>
                            <div>
                                <button id="addPanelBtn" class="w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors">
                                    Panel Ekle
                                </button>
                            </div>
                        </div>
                        
                        <div class="mt-6">
                            <button id="calculateBtn" class="w-full bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors">
                                Yükleme Planı Hesapla
                            </button>
                        </div>
                        
                        <div class="mt-4">
                            <button id="resetBtn" class="w-full bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 transition-colors">
                                Formu Sıfırla
                            </button>
                        </div>
                        
                        <div class="mt-4">
                            <button id="importJsonBtn" class="w-full bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600 transition-colors">
                                JSON İçe Aktar
                            </button>
                            <input type="file" id="jsonFileInput" accept=".json" class="hidden">
                        </div>
                    </div>
                    
                    <!-- Panel Listesi -->
                    <div>
                        <h3 class="font-semibold text-gray-700 mb-3">Panel Listesi</h3>
                        <div id="panelList" class="space-y-2 max-h-96 overflow-y-auto">
                            <!-- Panel items will be added here -->
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Sonuçlar -->
            <div id="resultsContainer" class="bg-white rounded-lg shadow-md p-6 hidden">
                <h2 class="text-xl font-bold mb-4 text-gray-800">Yükleme Planı Sonuçları</h2>
                
                <div class="grid grid-cols-1 gap-6">
                    <div>
                        <h3 class="font-semibold text-gray-700 mb-3">Panel Özeti</h3>
                        <div id="panelSummary" class="bg-gray-50 p-4 rounded-lg border border-gray-200 space-y-2">
                            <!-- Panel summary will be added here -->
                        </div>
                        
                        <h3 class="font-semibold text-gray-700 mt-6 mb-3">Konteyner Bilgileri</h3>
                        <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
                            <p id="containerDimensions" class="text-gray-700 font-medium">Konteyner Boyutları: </p>
                            <p id="containerVolume" class="text-gray-700 font-medium">Konteyner Hacmi: </p>
                            <p id="usedVolume" class="text-gray-700 font-medium">Kullanılan Hacim: </p>
                            <p id="volumePercentage" class="text-gray-700 font-medium">Doluluk Oranı: </p>
                            <p id="totalWeight" class="text-gray-700 font-medium">Toplam Ağırlık: </p>
                            <p id="weightPercentage" class="text-gray-700 font-medium">Ağırlık Kapasitesi Kullanımı: </p>
                            <p id="requiredVehicles" class="text-gray-700 font-medium mt-2 text-lg">Gerekli Araç Sayısı: </p>
                        </div>
                        
                        <h3 class="font-semibold text-gray-700 mt-6 mb-3">Yükleme Planı Görünümü (Yandan Görünüş)</h3>
                        <div id="loadingPlanContainer" class="loading-plan-container">
                            <!-- Loading plan visualization will be added here -->
                        </div>
                        
                        <div id="loadingMessage" class="mt-4 p-3 bg-yellow-100 border border-yellow-300 rounded-lg text-yellow-800 hidden">
                            <!-- Loading message will be added here -->
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <footer class="bg-gray-800 text-white p-4 mt-auto">
            <div class="container mx-auto text-center">
                <p>&copy; 2023 Kompozit Panel Yükleme Planlama Sistemi. Tüm hakları saklıdır.</p>
            </div>
        </footer>
        
        <!-- JSON Import Modal -->
        <div id="jsonModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full">
                <h3 class="text-xl font-bold mb-4">JSON Verisi Girin</h3>
                <textarea id="jsonInput" rows="10" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder='[
  {
    "renk": "Siyah",
    "en": 1250,
    "boy": 4010,
    "kalinlik": 4,
    "adet": 800,
    "core": "PE"
  },
  {
    "renk": "Gri",
    "en": 1500,
    "boy": 3200,
    "m2": 2000,
    "kalinlik": 4,
    "core": "FR"
  }
]'></textarea>
                <div class="flex justify-end mt-4 space-x-2">
                    <button id="cancelJsonBtn" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">İptal</button>
                    <button id="importJsonDataBtn" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">İçe Aktar</button>
                </div>
            </div>
        </div>
        
        <!-- Panel Edit Modal -->
        <div id="editPanelModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
            <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full">
                <h3 class="text-xl font-bold mb-4">Panel Düzenle</h3>
                <div class="space-y-4">
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="editPanelColor" class="block text-gray-700 mb-1">Renk</label>
                            <input type="text" id="editPanelColor" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label for="editPanelCore" class="block text-gray-700 mb-1">Core Tipi</label>
                            <select id="editPanelCore" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="PE">PE</option>
                                <option value="FR">FR</option>
                                <option value="A2">A2</option>
                            </select>
                        </div>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label for="editPanelWidth" class="block text-gray-700 mb-1">En (mm)</label>
                            <select id="editPanelWidth" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="1000">1000 mm</option>
                                <option value="1250">1250 mm</option>
                                <option value="1500">1500 mm</option>
                                <option value="1600">1600 mm</option>
                            </select>
                        </div>
                        <div>
                            <label for="editPanelLength" class="block text-gray-700 mb-1">Boy (mm)</label>
                            <input type="number" id="editPanelLength" min="1" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    <div class="grid grid-cols-3 gap-4">
                        <div>
                            <label for="editPanelThickness" class="block text-gray-700 mb-1">Kalınlık (mm)</label>
                            <input type="number" id="editPanelThickness" min="1" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label for="editPanelCount" class="block text-gray-700 mb-1">Adet</label>
                            <input type="number" id="editPanelCount" min="1" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label for="editPanelArea" class="block text-gray-700 mb-1">m² (Opsiyonel)</label>
                            <input type="number" id="editPanelArea" min="0" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    <input type="hidden" id="editPanelId">
                </div>
                <div class="flex justify-end mt-4 space-x-2">
                    <button id="cancelEditBtn" class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">İptal</button>
                    <button id="saveEditBtn" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const addPanelBtn = document.getElementById('addPanelBtn');
            const calculateBtn = document.getElementById('calculateBtn');
            const resetBtn = document.getElementById('resetBtn');
            const importJsonBtn = document.getElementById('importJsonBtn');
            const jsonFileInput = document.getElementById('jsonFileInput');
            const jsonModal = document.getElementById('jsonModal');
            const cancelJsonBtn = document.getElementById('cancelJsonBtn');
            const importJsonDataBtn = document.getElementById('importJsonDataBtn');
            const jsonInput = document.getElementById('jsonInput');
            
            const editPanelModal = document.getElementById('editPanelModal');
            const editPanelColor = document.getElementById('editPanelColor');
            const editPanelCore = document.getElementById('editPanelCore');
            const editPanelWidth = document.getElementById('editPanelWidth');
            const editPanelLength = document.getElementById('editPanelLength');
            const editPanelThickness = document.getElementById('editPanelThickness');
            const editPanelCount = document.getElementById('editPanelCount');
            const editPanelArea = document.getElementById('editPanelArea');
            const editPanelId = document.getElementById('editPanelId');
            const cancelEditBtn = document.getElementById('cancelEditBtn');
            const saveEditBtn = document.getElementById('saveEditBtn');
            
            const vehicleTypeSelect = document.getElementById('vehicleType');
            const customDimensionsContainer = document.getElementById('customDimensionsContainer');
            const vehicleVolumeDisplay = document.getElementById('vehicleVolume');
            const vehicleMaxPayloadDisplay = document.getElementById('vehicleMaxPayload');
            
            const panelColorInput = document.getElementById('panelColor');
            const panelCoreSelect = document.getElementById('panelCore');
            const panelWidthSelect = document.getElementById('panelWidth');
            const panelLengthInput = document.getElementById('panelLength');
            const panelThicknessInput = document.getElementById('panelThickness');
            const panelCountInput = document.getElementById('panelCount');
            const panelAreaInput = document.getElementById('panelArea');
            
            const containerLengthInput = document.getElementById('containerLength');
            const containerWidthInput = document.getElementById('containerWidth');
            const containerHeightInput = document.getElementById('containerHeight');
            
            const panelList = document.getElementById('panelList');
            const resultsContainer = document.getElementById('resultsContainer');
            const panelSummary = document.getElementById('panelSummary');
            const containerDimensions = document.getElementById('containerDimensions');
            const containerVolume = document.getElementById('containerVolume');
            const usedVolume = document.getElementById('usedVolume');
            const volumePercentage = document.getElementById('volumePercentage');
            const totalWeight = document.getElementById('totalWeight');
            const weightPercentage = document.getElementById('weightPercentage');
            const requiredVehicles = document.getElementById('requiredVehicles');
            const loadingPlanContainer = document.getElementById('loadingPlanContainer');
            const loadingMessage = document.getElementById('loadingMessage');
            
            let panelItems = [];
            let panelCounter = 0;
            
            // Araç tipleri ve boyutları
            const vehicles = {
                "20ft_container": {
                    "product_name": "20\" konteyner",
                    "internal_length_m": 5.90,
                    "internal_width_m": 2.35,
                    "internal_height_m": 2.39,
                    "volume_m3": 33,
                    "max_payload_kg": 25000
                },
                "40ft_container": {
                    "product_name": "40\" konteyner",
                    "internal_length_m": 12.03,
                    "internal_width_m": 2.35,
                    "internal_height_m": 2.39,
                    "volume_m3": 67,
                    "max_payload_kg": 27000
                },
                "40ft_hc_container": {
                    "product_name": "40\" high cube konteyner",
                    "internal_length_m": 12.03,
                    "internal_width_m": 2.35,
                    "internal_height_m": 2.69,
                    "volume_m3": 76,
                    "max_payload_kg": 27000
                },
                "standard_truck": {
                    "product_name": "TIR",
                    "internal_length_m": 13.60,
                    "internal_width_m": 2.45,
                    "internal_height_m": 2.70,
                    "volume_m3": 90,
                    "max_payload_kg": 26000
                }
            };
            
            // Güncellenmiş Palet ölçüleri (mm)
            const paletEnleri = [1000, 1250, 1500, 1600];
            const paletBoylari = [2010, 2260, 2510, 2760, 3010, 3210, 3510, 3760, 4010, 4260, 4510, 4760, 5010, 5260, 5510, 5760, 6010, 6260, 6410];
            const paletYuksekligi = 200; // mm
            
            // Core tiplerine göre birim ağırlıklar (kg/m²)
            const coreBirimAgirliklar = {
                "PE": 5.60,
                "FR": 7.30,
                "A2": 8.60
            };
            
            // Güncellenmiş paketleme tablosu (core tipi, en, boy aralıklarına göre; palet başına panel adedi)
            const panelPaketlemeTablosu = {
                "PE": {
                    1000: [
                        {min: 1500, max: 1999, adet: 100},
                        {min: 2000, max: 2499, adet: 100},
                        {min: 2500, max: 2999, adet: 85},
                        {min: 3000, max: 3199, adet: 75},
                        {min: 3200, max: 3499, adet: 75},
                        {min: 3500, max: 3999, adet: 65},
                        {min: 4000, max: 4499, adet: 60},
                        {min: 4500, max: 4999, adet: 50},
                        {min: 5000, max: 5499, adet: 40},
                        {min: 5500, max: 6000, adet: 30},
                        {min: 6001, max: 6500, adet: 25}
                    ],
                    1250: [
                        {min: 1500, max: 1999, adet: 100},
                        {min: 2000, max: 2499, adet: 90},
                        {min: 2500, max: 2999, adet: 80},
                        {min: 3000, max: 3199, adet: 75},
                        {min: 3200, max: 3499, adet: 75},
                        {min: 3500, max: 3999, adet: 60},
                        {min: 4000, max: 4499, adet: 50},
                        {min: 4500, max: 4999, adet: 45},
                        {min: 5000, max: 5499, adet: 40},
                        {min: 5500, max: 6000, adet: 30},
                        {min: 6001, max: 6500, adet: 25}
                    ],
                    1500: [
                        {min: 1500, max: 1999, adet: 100},
                        {min: 2000, max: 2499, adet: 90},
                        {min: 2500, max: 2999, adet: 75},
                        {min: 3000, max: 3199, adet: 70},
                        {min: 3200, max: 3499, adet: 65},
                        {min: 3500, max: 3999, adet: 60},
                        {min: 4000, max: 4499, adet: 50},
                        {min: 4500, max: 4999, adet: 45},
                        {min: 5000, max: 5499, adet: 40},
                        {min: 5500, max: 6000, adet: 30},
                        {min: 6001, max: 6500, adet: 25}
                    ],
                    1600: [
                        {min: 1500, max: 1999, adet: 90},
                        {min: 2000, max: 2499, adet: 80},
                        {min: 2500, max: 2999, adet: 70},
                        {min: 3000, max: 3199, adet: 65},
                        {min: 3200, max: 3499, adet: 60},
                        {min: 3500, max: 3999, adet: 55},
                        {min: 4000, max: 4499, adet: 45},
                        {min: 4500, max: 4999, adet: 40},
                        {min: 5000, max: 5499, adet: 35},
                        {min: 5500, max: 6000, adet: 25},
                        {min: 6001, max: 6500, adet: 20}
                    ]
                },
                "FR": {
                    1000: [
                        {min: 1500, max: 1999, adet: 90},
                        {min: 2000, max: 2499, adet: 80},
                        {min: 2500, max: 2999, adet: 70},
                        {min: 3000, max: 3199, adet: 65},
                        {min: 3200, max: 3499, adet: 60},
                        {min: 3500, max: 3999, adet: 50},
                        {min: 4000, max: 4499, adet: 45},
                        {min: 4500, max: 4999, adet: 40},
                        {min: 5000, max: 5499, adet: 35},
                        {min: 5500, max: 6000, adet: 30},
                        {min: 6001, max: 6500, adet: 25}
                    ],
                    1250: [
                        {min: 1500, max: 1999, adet: 90},
                        {min: 2000, max: 2499, adet: 80},
                        {min: 2500, max: 2999, adet: 70},
                        {min: 3000, max: 3199, adet: 65},
                        {min: 3200, max: 3499, adet: 60},
                        {min: 3500, max: 3999, adet: 50},
                        {min: 4000, max: 4499, adet: 45},
                        {min: 4500, max: 4999, adet: 40},
                        {min: 5000, max: 5499, adet: 35},
                        {min: 5500, max: 6000, adet: 30},
                        {min: 6001, max: 6500, adet: 25}
                    ],
                    1500: [
                        {min: 1500, max: 1999, adet: 80},
                        {min: 2000, max: 2499, adet: 70},
                        {min: 2500, max: 2999, adet: 60},
                        {min: 3000, max: 3199, adet: 55},
                        {min: 3200, max: 3499, adet: 50},
                        {min: 3500, max: 3999, adet: 45},
                        {min: 4000, max: 4499, adet: 35},
                        {min: 4500, max: 4999, adet: 35},
                        {min: 5000, max: 5499, adet: 30},
                        {min: 5500, max: 6000, adet: 25},
                        {min: 6001, max: 6500, adet: 20}
                    ],
                    1600: [
                        {min: 1500, max: 1999, adet: 70},
                        {min: 2000, max: 2499, adet: 60},
                        {min: 2500, max: 2999, adet: 50},
                        {min: 3000, max: 3199, adet: 45},
                        {min: 3200, max: 3499, adet: 40},
                        {min: 3500, max: 3999, adet: 35},
                        {min: 4000, max: 4499, adet: 30},
                        {min: 4500, max: 4999, adet: 30},
                        {min: 5000, max: 5499, adet: 25},
                        {min: 5500, max: 6000, adet: 20},
                        {min: 6001, max: 6500, adet: 15}
                    ]
                },
                "A2": {
                    1000: [
                        {min: 1500, max: 1999, adet: 75},
                        {min: 2000, max: 2499, adet: 60},
                        {min: 2500, max: 2999, adet: 50},
                        {min: 3000, max: 3199, adet: 47},
                        {min: 3200, max: 3499, adet: 43},
                        {min: 3500, max: 3999, adet: 38},
                        {min: 4000, max: 4499, adet: 33},
                        {min: 4500, max: 4999, adet: 30},
                        {min: 5000, max: 5499, adet: 27},
                        {min: 5500, max: 6000, adet: 20},
                        {min: 6001, max: 6500, adet: 17}
                    ],
                    1250: [
                        {min: 1500, max: 1999, adet: 60},
                        {min: 2000, max: 2499, adet: 48},
                        {min: 2500, max: 2999, adet: 40},
                        {min: 3000, max: 3199, adet: 38},
                        {min: 3200, max: 3499, adet: 34},
                        {min: 3500, max: 3999, adet: 30},
                        {min: 4000, max: 4499, adet: 27},
                        {min: 4500, max: 4999, adet: 24},
                        {min: 5000, max: 5499, adet: 22},
                        {min: 5500, max: 6000, adet: 20},
                        {min: 6001, max: 6500, adet: 17}
                    ],
                    1500: [
                        {min: 1500, max: 1999, adet: 50},
                        {min: 2000, max: 2499, adet: 40},
                        {min: 2500, max: 2999, adet: 33},
                        {min: 3000, max: 3199, adet: 31},
                        {min: 3200, max: 3499, adet: 29},
                        {min: 3500, max: 3999, adet: 25},
                        {min: 4000, max: 4499, adet: 22},
                        {min: 4500, max: 4999, adet: 20},
                        {min: 5000, max: 5499, adet: 18},
                        {min: 5500, max: 6000, adet: 17},
                        {min: 6001, max: 6500, adet: 16}
                    ],
                    1600: [
                        {min: 1500, max: 1999, adet: 45},
                        {min: 2000, max: 2499, adet: 35},
                        {min: 2500, max: 2999, adet: 30},
                        {min: 3000, max: 3199, adet: 28},
                        {min: 3200, max: 3499, adet: 26},
                        {min: 3500, max: 3999, adet: 22},
                        {min: 4000, max: 4499, adet: 20},
                        {min: 4500, max: 4999, adet: 18},
                        {min: 5000, max: 5499, adet: 16},
                        {min: 5500, max: 6000, adet: 15},
                        {min: 6001, max: 6500, adet: 14}
                    ]
                }
            };
            
            // Function to update container dimensions based on vehicle type
            function updateContainerDimensions() {
                const vehicleType = vehicleTypeSelect.value;
                
                if (vehicleType !== 'custom') {
                    const vehicle = vehicles[vehicleType];
                    
                    // Convert meters to centimeters for display
                    containerLengthInput.value = Math.round(vehicle.internal_length_m * 100);
                    containerWidthInput.value = Math.round(vehicle.internal_width_m * 100);
                    containerHeightInput.value = Math.round(vehicle.internal_height_m * 100);
                    
                    // Update volume and max payload displays
                    vehicleVolumeDisplay.textContent = vehicle.volume_m3;
                    vehicleMaxPayloadDisplay.textContent = vehicle.max_payload_kg.toLocaleString();
                    
                    // Disable inputs for predefined vehicles
                    containerLengthInput.disabled = true;
                    containerWidthInput.disabled = true;
                    containerHeightInput.disabled = true;
                } else {
                    // Enable inputs for custom dimensions
                    containerLengthInput.disabled = false;
                    containerWidthInput.disabled = false;
                    containerHeightInput.disabled = false;
                    
                    // Calculate volume for custom dimensions
                    const length = parseInt(containerLengthInput.value) / 100; // cm to m
                    const width = parseInt(containerWidthInput.value) / 100; // cm to m
                    const height = parseInt(containerHeightInput.value) / 100; // cm to m
                    const volume = length * width * height;
                    
                    // Update volume display
                    vehicleVolumeDisplay.textContent = volume.toFixed(2);
                    vehicleMaxPayloadDisplay.textContent = "26000"; // Default max payload for custom
                }
            }
            
            // Function to find the appropriate pallet size for a panel
            function findAppropriatePaletSize(panelWidth, panelLength) {
                // En için uygun palet seçimi
                let uygunEn = null;
                
                // Tam eşleşme varsa onu seç
                if (paletEnleri.includes(panelWidth)) {
                    uygunEn = panelWidth;
                } else {
                    // Yoksa bir büyük olanı seç
                    for (let i = 0; i < paletEnleri.length; i++) {
                        if (paletEnleri[i] >= panelWidth) {
                            uygunEn = paletEnleri[i];
                            break;
                        }
                    }
                    
                    // Eğer hala bulunamadıysa (panel eni tüm palet enlerinden büyükse)
                    // en büyük palet enini seç
                    if (uygunEn === null) {
                        uygunEn = paletEnleri[paletEnleri.length - 1];
                    }
                }
                
                // Boy için uygun palet seçimi
                let uygunBoy = null;
                
                // Tam eşleşme varsa onu seç
                if (paletBoylari.includes(panelLength)) {
                    uygunBoy = panelLength;
                } else {
                    // Yoksa bir büyük olanı seç
                    for (let i = 0; i < paletBoylari.length; i++) {
                        if (paletBoylari[i] >= panelLength) {
                            uygunBoy = paletBoylari[i];
                            break;
                        }
                    }
                    
                    // Eğer hala bulunamadıysa (panel boyu tüm palet boylarından büyükse)
                    // en büyük palet boyunu seç
                    if (uygunBoy === null) {
                        uygunBoy = paletBoylari[paletBoylari.length - 1];
                    }
                }
                
                // Seçilen en ve boy ile palet nesnesini oluştur
                return {
                    en: uygunEn,
                    boy: uygunBoy,
                    yukseklik: paletYuksekligi
                };
            }
            
            // Function to find panels per pallet based on core type, width and length
            function findPanelsPerPallet(coreType, panelWidth, panelLength) {
                // Find the closest standard width
                let standardWidth = null;
                let minWidthDiff = Infinity;
                
                for (const width in panelPaketlemeTablosu[coreType]) {
                    const diff = Math.abs(parseInt(width) - panelWidth);
                    if (diff < minWidthDiff) {
                        minWidthDiff = diff;
                        standardWidth = parseInt(width);
                    }
                }
                
                // Find the appropriate length range
                const lengthRanges = panelPaketlemeTablosu[coreType][standardWidth];
                for (const range of lengthRanges) {
                    if (panelLength >= range.min && panelLength <= range.max) {
                        return range.adet;
                    }
                }
                
                // Default value if no match found
                return 30; // Default conservative value
            }
            
            // Function to calculate panel weight based on core type, dimensions and count
            function calculatePanelWeight(coreType, width, length, count) {
                // Convert mm to m for area calculation
                const panelAreaInM2 = (width / 1000) * (length / 1000);
                // Get weight per m² for the core type
                const weightPerM2 = coreBirimAgirliklar[coreType];
                // Calculate total weight
                return panelAreaInM2 * count * weightPerM2;
            }
            
            // Function to create panel object
            function createPanelObject(color, core, width, length, thickness, count, area) {
                if (!color) {
                    alert('Lütfen panel rengini giriniz.');
                    return null;
                }
                
                if (!width || width <= 0) {
                    alert('Lütfen geçerli bir panel eni giriniz.');
                    return null;
                }
                
                if (!length || length <= 0) {
                    alert('Lütfen geçerli bir panel boyu giriniz.');
                    return null;
                }
                
                if (!thickness || thickness <= 0) {
                    alert('Lütfen geçerli bir panel kalınlığı giriniz.');
                    return null;
                }
                
                // If area is provided but count is not, calculate count
                if (area && !count) {
                    // Convert mm to m for area calculation
                    const panelAreaInM2 = (width / 1000) * (length / 1000);
                    count = Math.ceil(area / panelAreaInM2);
                } else if (!count || count <= 0) {
                    alert('Lütfen geçerli bir panel adedi veya m² değeri giriniz.');
                    return null;
                }
                
                // Find appropriate pallet size
                const paletSize = findAppropriatePaletSize(width, length);
                
                // Find panels per pallet
                const panelsPerPallet = findPanelsPerPallet(core, width, length);
                
                // Calculate number of pallets needed
                const palletsNeeded = Math.ceil(count / panelsPerPallet);
                
                // Calculate pallet height
                const palletHeight = (thickness * panelsPerPallet) + paletSize.yukseklik;
                
                // Calculate panel weight
                const panelWeight = calculatePanelWeight(core, width, length, count);
                
                panelCounter++;
                const panelId = `panel-${panelCounter}`;
                
                return {
                    id: panelId,
                    color: color,
                    core: core,
                    width: parseInt(width),
                    length: parseInt(length),
                    thickness: parseInt(thickness),
                    count: parseInt(count),
                    area: area ? parseFloat(area) : null,
                    paletSize: paletSize,
                    panelsPerPallet: panelsPerPallet,
                    palletsNeeded: palletsNeeded,
                    palletHeight: palletHeight,
                    weight: panelWeight
                };
            }
            
            // Function to add a panel to the list
            function addPanel() {
                const color = panelColorInput.value.trim();
                const core = panelCoreSelect.value;
                const width = parseInt(panelWidthSelect.value);
                const length = parseInt(panelLengthInput.value);
                const thickness = parseInt(panelThicknessInput.value);
                const count = parseInt(panelCountInput.value);
                const area = parseFloat(panelAreaInput.value);
                
                const panelItem = createPanelObject(color, core, width, length, thickness, count, area);
                
                if (!panelItem) return;
                
                panelItems.push(panelItem);
                
                // Create panel item element
                renderPanelItem(panelItem);
                
                // Reset inputs
                panelColorInput.value = '';
                panelLengthInput.value = '';
                panelCountInput.value = '';
                panelAreaInput.value = '';
                
                // Focus on color input for next entry
                panelColorInput.focus();
            }
            
            // Function to render a panel item in the list
            function renderPanelItem(panelItem) {
                const panelElement = document.createElement('div');
                panelElement.id = panelItem.id;
                panelElement.className = 'panel-item flex justify-between items-center bg-blue-50 p-3 rounded-lg border border-blue-200';
                panelElement.innerHTML = `
                    <div>
                        <span class="font-medium">${panelItem.color} (${panelItem.core})</span>
                        <span class="ml-2 text-gray-600">${panelItem.width}mm x ${panelItem.length}mm x ${panelItem.thickness}mm</span>
                        <span class="ml-2 text-gray-600">${panelItem.count} adet</span>
                        <div class="text-sm text-gray-500 mt-1">
                            Palet: ${panelItem.paletSize.en}mm x ${panelItem.paletSize.boy}mm, ${panelItem.panelsPerPallet} panel/palet, ${panelItem.palletsNeeded} palet gerekli
                        </div>
                        <div class="text-sm text-gray-500">
                            Ağırlık: ${panelItem.weight.toFixed(2)} kg
                        </div>
                    </div>
                    <div class="flex space-x-2">
                        <button class="edit-panel text-blue-500 hover:text-blue-700" data-id="${panelItem.id}">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                            </svg>
                        </button>
                        <button class="remove-panel text-red-500 hover:text-red-700" data-id="${panelItem.id}">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                `;
                
                panelList.appendChild(panelElement);
                
                // Add event listeners to buttons
                panelElement.querySelector('.remove-panel').addEventListener('click', function() {
                    const panelId = this.getAttribute('data-id');
                    removePanel(panelId);
                });
                
                panelElement.querySelector('.edit-panel').addEventListener('click', function() {
                    const panelId = this.getAttribute('data-id');
                    openEditPanel(panelId);
                });
            }
            
            // Function to remove a panel from the list
            function removePanel(panelId) {
                // Remove from DOM
                const panelElement = document.getElementById(panelId);
                if (panelElement) {
                    panelElement.remove();
                }
                
                // Remove from array
                panelItems = panelItems.filter(item => item.id !== panelId);
            }
            
            // Function to open edit panel modal
            function openEditPanel(panelId) {
                const panel = panelItems.find(item => item.id === panelId);
                
                if (!panel) return;
                
                // Fill the edit form with panel data
                editPanelColor.value = panel.color;
                editPanelCore.value = panel.core;
                
                // Set width dropdown to the closest value
                const widthOptions = Array.from(editPanelWidth.options);
                const closestWidthOption = widthOptions.reduce((prev, curr) => {
                    return (Math.abs(curr.value - panel.width) < Math.abs(prev.value - panel.width) ? curr : prev);
                });
                editPanelWidth.value = closestWidthOption.value;
                
                editPanelLength.value = panel.length;
                editPanelThickness.value = panel.thickness;
                editPanelCount.value = panel.count;
                editPanelArea.value = panel.area || '';
                editPanelId.value = panel.id;
                
                // Show the modal
                editPanelModal.classList.remove('hidden');
            }
            
            // Function to save edited panel
            function saveEditedPanel() {
                const panelId = editPanelId.value;
                const color = editPanelColor.value.trim();
                const core = editPanelCore.value;
                const width = parseInt(editPanelWidth.value);
                const length = parseInt(editPanelLength.value);
                const thickness = parseInt(editPanelThickness.value);
                const count = parseInt(editPanelCount.value);
                const area = editPanelArea.value ? parseFloat(editPanelArea.value) : null;
                
                // Create new panel object with updated values
                const updatedPanel = createPanelObject(color, core, width, length, thickness, count, area);
                
                if (!updatedPanel) return;
                
                // Keep the original ID
                updatedPanel.id = panelId;
                
                // Find the panel in the array and update it
                const panelIndex = panelItems.findIndex(item => item.id === panelId);
                
                if (panelIndex !== -1) {
                    panelItems[panelIndex] = updatedPanel;
                    
                    // Update the DOM element
                    const panelElement = document.getElementById(panelId);
                    if (panelElement) {
                        panelElement.remove();
                        renderPanelItem(updatedPanel);
                    }
                }
                
                // Close the modal
                editPanelModal.classList.add('hidden');
            }
            
            // Function to calculate loading plan
            function calculateLoadingPlan() {
                if (panelItems.length === 0) {
                    alert('Lütfen en az bir panel ekleyiniz.');
                    return;
                }
                
                // Get container dimensions (convert from cm to mm)
                const containerLength = parseInt(containerLengthInput.value) * 10;
                const containerWidth = parseInt(containerWidthInput.value) * 10;
                const containerHeight = parseInt(containerHeightInput.value) * 10;
                
                if (!containerLength || !containerWidth || !containerHeight) {
                    alert('Lütfen geçerli konteyner boyutları giriniz.');
                    return;
                }
                
                // Get vehicle type and max payload
                const vehicleType = vehicleTypeSelect.value;
                let maxPayloadKg = 26000; // Default
                
                if (vehicleType !== 'custom') {
                    maxPayloadKg = vehicles[vehicleType].max_payload_kg;
                }
                
                // Sort panels by size (largest first) for optimal loading
                // This follows the "trafik konisi" principle - largest at the bottom
                panelItems.sort((a, b) => {
                    // Sort by width first (descending)
                    if (b.width !== a.width) {
                        return b.width - a.width;
                    }
                    // Then by length (descending)
                    return b.length - a.length;
                });
                
                // Calculate container volume in cubic meters
                const containerVolumeM3 = (containerLength / 1000) * (containerWidth / 1000) * (containerHeight / 1000);
                
                // Calculate total pallets and their volume
                let totalPallets = 0;
                let totalPalletVolume = 0;
                let totalWeight = 0;
                
                panelItems.forEach(panel => {
                    totalPallets += panel.palletsNeeded;
                    
                    // Calculate volume of each pallet in cubic meters
                    const palletVolumeM3 = (panel.paletSize.en / 1000) * (panel.paletSize.boy / 1000) * (panel.palletHeight / 1000);
                    totalPalletVolume += palletVolumeM3 * panel.palletsNeeded;
                    
                    // Add panel weight to total
                    totalWeight += panel.weight;
                });
                
                // Calculate how many pallets can fit in the container length-wise
                // We're now only considering a single row down the center of the vehicle
                const palletsPerLength = Math.floor(containerLength / panelItems[0].paletSize.boy);
                
                // Maximum 6 pallets can be stacked on top of each other
                const maxStackHeight = 6;
                
                // Calculate total pallets that can fit (single row, stacked up to 6 high)
                const maxPalletsInContainer = palletsPerLength * maxStackHeight;
                
                // Calculate how many containers/trucks are needed based on volume and weight
                const requiredContainersByVolume = Math.ceil(totalPallets / maxPalletsInContainer);
                const requiredContainersByWeight = Math.ceil(totalWeight / maxPayloadKg);
                
                // Take the larger of the two requirements
                const requiredContainers = Math.max(requiredContainersByVolume, requiredContainersByWeight);
                
                // Calculate volume percentage
                const volumePercentageValue = (totalPalletVolume / containerVolumeM3) * 100;
                
                // Calculate weight percentage
                const weightPercentageValue = (totalWeight / maxPayloadKg) * 100;
                
                // Update panel summary
                panelSummary.innerHTML = '';
                panelItems.forEach(panel => {
                    const summaryItem = document.createElement('div');
                    summaryItem.className = 'border-b border-gray-200 pb-2';
                    summaryItem.innerHTML = `
                        <div class="font-medium">${panel.color} (${panel.core}) - ${panel.width}mm x ${panel.length}mm x ${panel.thickness}mm</div>
                        <div class="grid grid-cols-2 gap-2 mt-1">
                            <div>Panel Adedi: <span class="font-medium">${panel.count}</span></div>
                            <div>Palet Ölçüsü: <span class="font-medium">${panel.paletSize.en}mm x ${panel.paletSize.boy}mm</span></div>
                            <div>Palet Başına Panel: <span class="font-medium">${panel.panelsPerPallet}</span></div>
                            <div>Gerekli Palet: <span class="font-medium">${panel.palletsNeeded}</span></div>
                            <div>Palet Yüksekliği: <span class="font-medium">${panel.palletHeight}mm</span></div>
                            <div>Ağırlık: <span class="font-medium">${panel.weight.toFixed(2)} kg</span></div>
                        </div>
                    `;
                    panelSummary.appendChild(summaryItem);
                });
                
                // Get vehicle type name
                let vehicleTypeName = "Özel Ölçülü Araç";
                if (vehicleType !== 'custom') {
                    vehicleTypeName = vehicles[vehicleType].product_name;
                }
                
                // Update container information
                containerDimensions.textContent = `${vehicleTypeName}: ${containerLength/10}cm x ${containerWidth/10}cm x ${containerHeight/10}cm`;
                containerVolume.textContent = `Konteyner Hacmi: ${containerVolumeM3.toFixed(2)} m³`;
                usedVolume.textContent = `Kullanılan Hacim: ${totalPalletVolume.toFixed(2)} m³`;
                volumePercentage.textContent = `Doluluk Oranı: ${volumePercentageValue.toFixed(1)}%`;
                totalWeight.textContent = `Toplam Ağırlık: ${totalWeight.toFixed(2)} kg`;
                weightPercentage.textContent = `Ağırlık Kapasitesi Kullanımı: ${weightPercentageValue.toFixed(1)}%`;
                requiredVehicles.textContent = `Gerekli Araç Sayısı: ${requiredContainers}`;
                
                if (requiredContainers > 1) {
                    requiredVehicles.classList.add('text-red-600');
                } else {
                    requiredVehicles.classList.remove('text-red-600');
                }
                
                // Create loading plan visualization (side view)
                createSideViewLoadingPlan(containerLength, containerWidth, containerHeight, panelItems);
                
                // Show results
                resultsContainer.classList.remove('hidden');
                
                // Scroll to results
                resultsContainer.scrollIntoView({ behavior: 'smooth' });
            }
            
            // Function to create side view loading plan visualization
            function createSideViewLoadingPlan(containerLength, containerWidth, containerHeight, panels) {
                // Set container dimensions for visualization (scaled down)
                const scale = 0.2; // Scale factor to fit in the UI
                const containerLengthPx = containerLength * scale;
                const containerHeightPx = containerHeight * scale;
                
                // Set the container dimensions for side view
                loadingPlanContainer.style.width = `${containerLengthPx}px`;
                loadingPlanContainer.style.height = `${containerHeightPx}px`;
                loadingPlanContainer.innerHTML = '';
                
                // Add vehicle outline
                const vehicleOutline = document.createElement('div');
                vehicleOutline.className = 'vehicle-outline';
                vehicleOutline.style.width = `${containerLengthPx}px`;
                vehicleOutline.style.height = `${containerHeightPx}px`;
                loadingPlanContainer.appendChild(vehicleOutline);
                
                // Add vehicle floor
                const vehicleFloor = document.createElement('div');
                vehicleFloor.className = 'vehicle-floor';
                loadingPlanContainer.appendChild(vehicleFloor);
                
                // Group pallets by their length (boy) to organize them better
                const paletsByType = {};
                
                // First, organize pallets by their type (color + size)
                panels.forEach(panel => {
                    const typeKey = `${panel.color}-${panel.paletSize.boy}`;
                    if (!paletsByType[typeKey]) {
                        paletsByType[typeKey] = {
                            panel: panel,
                            count: panel.palletsNeeded,
                            color: getColorForPanel(panel.color),
                            width: panel.paletSize.en,
                            length: panel.paletSize.boy,
                            height: panel.palletHeight
                        };
                    } else {
                        paletsByType[typeKey].count += panel.palletsNeeded;
                    }
                });
                
                // Convert to array for easier sorting
                const paletTypes = Object.values(paletsByType);
                
                // Sort by length (descending) to place longer pallets first
                paletTypes.sort((a, b) => b.length - a.length);
                
                // Calculate how many columns we can fit across the container length
                const maxColumns = Math.floor(containerLength / Math.min(...paletTypes.map(p => p.length)));
                
                // Create columns for pallets
                const columns = Array(maxColumns).fill().map(() => ({
                    pallets: [],
                    currentHeight: 0,
                    length: 0 // Will be set based on the pallets in the column
                }));
                
                // Place pallets in columns
                for (const paletType of paletTypes) {
                    let remainingPallets = paletType.count;
                    
                    while (remainingPallets > 0) {
                        // Find the column with the lowest current height
                        let targetColumn = columns[0];
                        let minHeight = columns[0].currentHeight;
                        
                        for (let i = 1; i < columns.length; i++) {
                            if (columns[i].currentHeight < minHeight) {
                                minHeight = columns[i].currentHeight;
                                targetColumn = columns[i];
                            }
                        }
                        
                        // Calculate how many pallets we can stack in this column
                        // Maximum 6 pallets high or until we reach container height
                        const maxStackInColumn = Math.min(
                            6, // Maximum stack height
                            Math.floor((containerHeight - targetColumn.currentHeight) / paletType.height), // Height constraint
                            remainingPallets // Available pallets
                        );
                        
                        if (maxStackInColumn <= 0) {
                            // Can't fit any more pallets in any column
                            break;
                        }
                        
                        // Add pallets to the column
                        targetColumn.pallets.push({
                            ...paletType,
                            count: maxStackInColumn,
                            startHeight: targetColumn.currentHeight
                        });
                        
                        // Update column properties
                        targetColumn.currentHeight += maxStackInColumn * paletType.height;
                        targetColumn.length = Math.max(targetColumn.length, paletType.length);
                        
                        // Update remaining pallets
                        remainingPallets -= maxStackInColumn;
                    }
                }
                
                // Filter out empty columns
                const usedColumns = columns.filter(col => col.pallets.length > 0);
                
                // Calculate total width needed for all columns
                let totalLength = 0;
                usedColumns.forEach(col => {
                    totalLength += col.length;
                });
                
                // Position columns in the container
                let currentX = 0;
                
                usedColumns.forEach((column, colIndex) => {
                    const columnLength = column.length * scale;
                    
                    // Place each pallet stack in the column
                    column.pallets.forEach(paletStack => {
                        const paletLength = paletStack.length * scale;
                        const paletHeight = paletStack.height * scale;
                        
                        // Center the pallet in its column if smaller than column width
                        const xOffset = (columnLength - paletLength) / 2;
                        
                        // Create pallets in the stack
                        for (let i = 0; i < paletStack.count; i++) {
                            const yPosition = containerHeightPx - ((i + 1) * paletHeight) - (paletStack.startHeight * scale);
                            
                            // Create pallet element
                            const paletElement = document.createElement('div');
                            paletElement.className = 'pallet';
                            paletElement.style.width = `${paletLength}px`;
                            paletElement.style.height = `${paletHeight}px`;
                            paletElement.style.backgroundColor = paletStack.color;
                            paletElement.style.left = `${currentX + xOffset}px`;
                            paletElement.style.bottom = `${containerHeightPx - yPosition - paletHeight}px`;
                            paletElement.textContent = `${paletStack.panel.color}`;
                            
                            loadingPlanContainer.appendChild(paletElement);
                        }
                    });
                    
                    // Move to the next column position
                    currentX += columnLength;
                });
                
                // Check if all pallets can fit
                let totalPallets = 0;
                panels.forEach(panel => {
                    totalPallets += panel.palletsNeeded;
                });
                
                // Count pallets that were actually placed
                let placedPallets = 0;
                usedColumns.forEach(col => {
                    col.pallets.forEach(stack => {
                        placedPallets += stack.count;
                    });
                });
                
                if (placedPallets < totalPallets) {
                    loadingMessage.textContent = `Uyarı: Tüm paletler tek konteynere sığmıyor. ${Math.ceil(totalPallets / placedPallets)} araç gerekli.`;
                    loadingMessage.classList.remove('hidden');
                } else {
                    loadingMessage.classList.add('hidden');
                }
            }
            
            // Function to get a color for panel visualization
            function getColorForPanel(panelColor) {
                // Consistent color mapping for common colors
                const colorMap = {
                    'beyaz': '#f8fafc',
                    'siyah': '#1f2937',
                    'gri': '#9ca3af',
                    'kırmızı': '#ef4444',
                    'mavi': '#3b82f6',
                    'yeşil': '#10b981',
                    'sarı': '#f59e0b',
                    'turuncu': '#f97316',
                    'mor': '#8b5cf6',
                    'pembe': '#ec4899',
                    'kahverengi': '#92400e'
                };
                
                // Convert to lowercase and check if we have a predefined color
                const lowerColor = panelColor.toLowerCase();
                if (colorMap[lowerColor]) {
                    return colorMap[lowerColor];
                }
                
                // Generate a consistent color based on the panel color name
                let hash = 0;
                for (let i = 0; i < panelColor.length; i++) {
                    hash = panelColor.charCodeAt(i) + ((hash << 5) - hash);
                }
                
                // Make sure the color is not too light or too dark
                const hue = hash % 360;
                return `hsl(${hue}, 70%, 60%)`;
            }
            
            // Function to reset the form
            function resetForm() {
                panelItems = [];
                panelCounter = 0;
                panelList.innerHTML = '';
                
                panelColorInput.value = '';
                panelLengthInput.value = '';
                panelCountInput.value = '';
                panelAreaInput.value = '';
                
                resultsContainer.classList.add('hidden');
            }
            
            // Function to import JSON data
            function importJsonData(jsonData) {
                try {
                    const panels = JSON.parse(jsonData);
                    
                    if (!Array.isArray(panels)) {
                        throw new Error('JSON verisi bir dizi olmalıdır.');
                    }
                    
                    // Reset existing panels
                    resetForm();
                    
                    // Add each panel from JSON
                    panels.forEach(panel => {
                        // Map JSON fields to our form fields
                        const color = panel.renk || '';
                        const core = panel.core || 'PE';
                        const width = panel.en || '';
                        const length = panel.boy || '';
                        const thickness = panel.kalinlik || 4;
                        const count = panel.adet || null;
                        const area = panel.m2 || null;
                        
                        // Create and add panel
                        const panelItem = createPanelObject(color, core, width, length, thickness, count, area);
                        if (panelItem) {
                            panelItems.push(panelItem);
                            renderPanelItem(panelItem);
                        }
                    });
                    
                    // Close modal
                    jsonModal.classList.add('hidden');
                    
                } catch (error) {
                    alert('JSON verisi işlenirken hata oluştu: ' + error.message);
                }
            }
            
            // Event listeners
            addPanelBtn.addEventListener('click', addPanel);
            calculateBtn.addEventListener('click', calculateLoadingPlan);
            resetBtn.addEventListener('click', resetForm);
            
            // Edit panel modal event listeners
            cancelEditBtn.addEventListener('click', function() {
                editPanelModal.classList.add('hidden');
            });
            
            saveEditBtn.addEventListener('click', saveEditedPanel);
            
            // Close edit modal when clicking outside
            editPanelModal.addEventListener('click', function(e) {
                if (e.target === editPanelModal) {
                    editPanelModal.classList.add('hidden');
                }
            });
            
            // Vehicle type change handler
            vehicleTypeSelect.addEventListener('change', updateContainerDimensions);
            
            // Custom dimensions change handler
            containerLengthInput.addEventListener('change', function() {
                if (vehicleTypeSelect.value === 'custom') {
                    updateContainerDimensions();
                }
            });
            
            containerWidthInput.addEventListener('change', function() {
                if (vehicleTypeSelect.value === 'custom') {
                    updateContainerDimensions();
                }
            });
            
            containerHeightInput.addEventListener('change', function() {
                if (vehicleTypeSelect.value === 'custom') {
                    updateContainerDimensions();
                }
            });
            
            // Initialize container dimensions based on default vehicle type
            updateContainerDimensions();
            
            // JSON import handling
            importJsonBtn.addEventListener('click', function() {
                jsonModal.classList.remove('hidden');
            });
            
            cancelJsonBtn.addEventListener('click', function() {
                jsonModal.classList.add('hidden');
            });
            
            importJsonDataBtn.addEventListener('click', function() {
                const jsonData = jsonInput.value.trim();
                if (jsonData) {
                    importJsonData(jsonData);
                } else {
                    alert('Lütfen geçerli bir JSON verisi giriniz.');
                }
            });
            
            // Close modal when clicking outside
            jsonModal.addEventListener('click', function(e) {
                if (e.target === jsonModal) {
                    jsonModal.classList.add('hidden');
                }
            });
            
            // Allow Enter key to add panel
            [panelColorInput, panelLengthInput, panelThicknessInput, panelCountInput, panelAreaInput].forEach(input => {
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        addPanel();
                    }
                });
            });
            
            // Example JSON data
            const exampleJson = [
                {
                    "renk": "Siyah",
                    "en": 1250,
                    "boy": 4010,
                    "kalinlik": 4,
                    "adet": 800,
                    "core": "PE"
                },
                {
                    "renk": "Beyaz",
                    "en": 1500,
                    "boy": 3210,
                    "m2": 2000,
                    "kalinlik": 4,
                    "core": "FR"
                },
                {
                    "renk": "Mavi",
                    "en": 1250,
                    "boy": 4510,
                    "adet": 500,
                    "kalinlik": 4,
                    "core": "PE"
                }
            ];
            
            // Set example JSON in textarea
            jsonInput.value = JSON.stringify(exampleJson, null, 2);
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'93b0ca26e26b23a1',t:'MTc0NjQ1Mzg5NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>